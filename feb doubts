https://www.geeksforgeeks.org/problems/find-prime-numbers-in-a-range4718/1?utm_source=geeksforgeeks&utm_medium=ml_article_practice_tab&utm_campaign=article_practice_tab

class Solution {
    ArrayList<Integer> primeRange(int M, int N) {
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i=M;i<=N;i++){
            if(isPrime(i)){
                ans.add(i);
            }
        }
        return ans;
    }
    static boolean isPrime(int n){
        if(n==1){
            return false;
        }
        for(int i=2;i*i<=n;i++){
            if(n%i==0){
                return false;
            }
        }
        return true;
    }
}

https://leetcode.com/problems/number-of-common-factors/

class Solution {
    public int commonFactors(int a, int b) {
        int count = 0;
        int min = Math.min(a,b);
        for(int i=1;i<=min;i++){
            if(a%i==0 && b%i==0){
                count = count+1;
            }
            
        }
        return count;
    }
}

https://leetcode.com/problems/prime-arrangements/submissions/

class Solution {
    private static final int mod = 1000000007;
    public int numPrimeArrangements(int n) {
        int totalPrime = 0;
        for(int i=1;i<=n;i++){
            if(isPrime(i)){
                totalPrime = totalPrime+1;
            }
        }
        int nonPrime = n- totalPrime;
        long fact = (factorial(totalPrime)*factorial(nonPrime))%mod;
        return (int)fact;
        
    }
    // to calculate factorial 
    
    private long factorial(int n){
        long res = 1;
        for(int i=2;i<=n;i++){
            res = (res*i)%mod;
        }
        return res;
    }
    
    // to calculate that it is a prime number or not
    private boolean isPrime(int n){
        if(n<=1){
            return false;
        }
        for(int i=2;i*i<=n;i++){
        if(n%i==0){
            return false;
        }
        }
        return true;
    }
};

https://leetcode.com/problems/day-of-the-year/

class Solution {
    public int dayOfYear(String date) {
    int[] arr = {31,28,31,30,31,30,31,31,30,31,30,31};
      String[] monthD = date.split("-");
        int year = Integer.parseInt(monthD[0]);
        int month = Integer.parseInt(monthD[1]);
        int days = Integer.parseInt(monthD[2]);
        int totalDays = days;
        for(int i=0;i<month-1;i++){
            totalDays = totalDays+arr[i];
        }
        if(month>2 && year%4==0 && (year%400==0 || year%100!=0)){
            totalDays = totalDays+1;
        }
        return totalDays;
        }
}
